#!/bin/sh

# DEBUG=1
FLEXIBEE_SERVER_ARGS=""
FLEXIBEE_ARGS=""
FLEXIBEE_JAVA_ARGS="-Xmx1g -client -XX:-OmitStackTraceInFastThrow -XX:+IgnoreUnrecognizedVMOptions"
FLEXIBEE_LIB_DIR="/usr/share/abraflexi/lib/"
FLEXIBEE_CACHE_DIR="$HOME/.winstrom/cache/"

_debug() {
	if [ -n "${DEBUG}" ]
	then
		echo "DEBUG:   $1" >&2 
		shift
		for text in "$@"
		do
			echo "         ${text}" >&2
		done
	fi
}

_error() {
	echo "ERROR:   $1" >&2
	shift
	for text in "$@"
	do
		echo "         ${text}" >&2
	done
}

findjava() {
	# We try hard to find the proper 'java' command
	if [ -n "${FLEXIBEE_JAVA}" ] && [ -x "${FLEXIBEE_JAVA}" ]
        then
		JAVACMD="${JAVA_HOME}/bin/java"
		_debug "Using \$JAVA_HOME to find java virtual machine."
	else
		JAVACMD=$(which java)
		if [ -n "${JAVACMD}" ] && [ -x "${JAVACMD}" ]
		then
			_debug "Using \$PATH to find java virtual machine."
		elif [ -x /usr/bin/java ]
		then
			_debug "Using /usr/bin/java to find java virtual machine."
			JAVACMD=/usr/bin/java
		fi
	fi

	# if we were successful, we return 0 else we complain and return 1
	if [ -n "${JAVACMD}" ] && [ -x "${JAVACMD}" ]
	then
		_debug "Using '$JAVACMD' as java virtual machine..."
		return 0
	else
		_error "Couldn't find a java virtual machine," \
		       "define JAVACMD, JAVA_BINDIR, JAVA_HOME or PATH."
		return 1
	fi
}
_source() {
	if [ -f "$1" ]
	then
		_debug "Sourcing '$1'."
		. "$1"
	fi
}

# Fix for Stupid Debian settings in /etc/sysctl.d/bindipv6only.conf
if [ -f /proc/sys/net/ipv6/bindv6only -a x"`cat /proc/sys/net/ipv6/bindv6only`" = x"1" ]; then 
    FLEXIBEE_JAVA_ARGS="${FLEXIBEE_JAVA_ARGS} -Djava.net.preferIPv4Stack=true"
    echo "Disabling IPv6 support in FlexiBee due to the System settings"
fi

if [ -f /etc/default/flexibee ]; then
	. /etc/default/flexibee
fi

findjava
if [ $? -ne 0 ]
then
	exit 1
fi

winstrompath=$(dirname "$0")
cd $winstrompath;		    # we need to resolve relative paths
winstrompath=$(pwd)
winstrompath="${winstrompath%/bin}" # nothing happens if winstrom is not installed
	                            # under something/bin


# we try different possibilities to find winstrom jars
for jar in "${winstrompath}" "${winstrompath}/share/flexibee" "${winstrompath}/flexibee" "${winstrompath}/share/winstrom" "${winstrompath}/winstrom"
do
	for i in ${jar}/lib/winstrom-*.jar; do
		if [ -f $i ]; then
			winstromdir="${jar}"
			_debug "FlexiBee Directory is '${jar}'."
			break
		fi
	done

	if [ ! -z "${winstromdir}" ]; then
		break
	fi
done

if [ -z "${winstromdir}" ]
then
	_error "Couldn't find flexibee under '${winstrompath}'."
	exit 1
fi

_debug "FlexiBee Directory is '${winstromdir}'."

# The CLASSPATH also lets one specify additional jars, which is good, if
# you want to add a new Look&Feel jar (the motif one is so ugly...).

export CLASSPATH="${ADD_JARS}:${CLASSPATH}"
for i in ${winstromdir}/lib/classworlds*.jar; do
	CLASSPATH="${i}:${CLASSPATH}"
done

CLASSPATH="${CLASSPATH}:/usr/share/abraflexi/lib/javax.annotation-api-1.3.2.jar:/usr/share/abraflexi/lib/jaxb-api-2.3.0.jar:/usr/share/java/slf4j-simple.jar:/usr/share/java/slf4j-api.jar"

_debug "ClassPath is '$CLASSPATH'."

# Go back to user's home for default directory in backups, ...
cd $HOME

# Support for server as part of client.
# if [ x"$FLEXIBEE_CFG" = x"local" ]; then
#    FLEXIBEE_SERVER_ARGS="-c /etc/abraflexi/flexibee-server.xml $FLEXIBEE_SERVER_ARGS"
# fi

${JAVACMD} --add-opens java.base/java.util=ALL-UNNAMED --add-opens java.base/java.lang.reflect=ALL-UNNAMED --add-opens java.base/java.text=ALL-UNNAMED --add-opens java.desktop/java.awt.font=ALL-UNNAMED  \
--add-opens java.desktop/sun.awt.X11=ALL-UNNAMED  --add-opens java.base/java.lang=ALL-UNNAMED --add-exports java.xml.crypto/org.jcp.xml.dsig.internal.dom=ALL-UNNAMED  \
--illegal-access=deny  -cp $CLASSPATH -Dwinstromdir=${winstromdir}/lib -splash:${winstromdir}/flexibee-splash.png -Dclassworlds.conf=${winstromdir}/lib/launcher.txt  $FLEXIBEE_JAVA_ARGS org.codehaus.classworlds.Launcher $FLEXIBEE_ARGS $@
